name: CI/CD Pipeline for CommerceCore

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃 (최신 코드 가져오기)
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Java 17 환경 설정 (CommerceCore가 Spring Boot 기반이므로 JDK 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          
      # 3. Gradle wrapper 파일에 실행 권한 추가
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # 4. Github Actions 러너의 공인 IP 가져오기
      - name: Get Github Actions IP
        id: ip
        run: |
          PUBLIC_IP=$(curl -s https://ifconfig.me)
          echo "::set-output name=public_ip::$PUBLIC_IP"

      # 7. WAS 서버(Bastion Host 역할)에 SSH 접속 및 포트 포워딩 설정
      - name: SSH to WAS Server and forward DB connection
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.WAS_01_IP }}  # WAS 서버의 퍼블릭 IP
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # SSH 포트 포워딩을 통해 GitHub Actions가 프라이빗 서브넷의 DB에 접근 가능하도록 설정
            ssh -L 3306:10.0.2.7:3306 -N -f -l ${{ secrets.SERVER_USER }} ${{ secrets.WAS_01_IP }}
   

      # 7. Gradle 빌드 (Spring Boot 애플리케이션 빌드)
      - name: Build with Gradle
        run: ./gradlew build
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/commercecore


      # 8. Docker 이미지 빌드 (Docker 이미지 생성)
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/commercecore .

      # 9. Docker Hub 로그인 (로그인 후 이미지 푸시)
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 10. Docker 이미지 푸시 (Docker Hub에 이미지 업로드)
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/commercecore

  deploy:
    needs: build  # build 작업이 완료된 후 deploy 작업 실행
    runs-on: ubuntu-latest

    steps:
      # 7. SSH를 통해 NCP 서버로 접속 및 배포
      - name: SSH to Server and Deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.WAS_01_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/commercecore  # 새로운 이미지 가져오기
            docker stop commercecore || true  # 기존 컨테이너 중지
            docker rm commercecore || true    # 기존 컨테이너 제거
            docker run -d --name commercecore -p 8090:8090 ${{ secrets.DOCKER_HUB_USERNAME }}/commercecore  # 새로운 컨테이너 실행
